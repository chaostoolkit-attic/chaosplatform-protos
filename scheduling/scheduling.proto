syntax = "proto3";

package chaosplatform.scheduling;
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

message Schedule {
    string id = 1;
    string user_id = 2;
    string org_id = 3;
    string workspace_id = 4;
    string experiment_id = 5;
    string token_id = 6;
    string job_id = 7;
    string status = 8;
    float interval = 9;
    google.protobuf.Timestamp created_on = 10;
    google.protobuf.Timestamp active_from = 11;
    google.protobuf.Timestamp active_until = 12;
    google.protobuf.Struct results = 13;
    google.protobuf.Struct settings = 14;
    google.protobuf.Struct configuration = 15;
    google.protobuf.Struct secrets = 16;
}

message GetRequest {
    string id = 1;
    bool with_payload = 2;
}

message GetReply {
    Schedule schedule = 1;
}

message GetManyRequest {
    repeated string ids = 1;
    bool with_payload = 2;
}

message GetManyReply {
    repeated Schedule schedules = 1;
}

message GetByUserRequest {
    string user_id = 1;
    bool with_payload = 2;
}

message GetByUserReply {
    repeated Schedule schedules = 1;
}

message GetByOrgRequest {
    string org_id = 1;
    bool with_payload = 2;
}

message GetByOrgReply {
    repeated Schedule schedules = 1;
}

message GetByWorkspaceRequest {
    string workspace_id = 1;
    bool with_payload = 2;
}

message GetByWorkspaceReply {
    repeated Schedule schedules = 1;
}

message GetByExperimentRequest {
    string experiment_id = 1;
    bool with_payload = 2;
}

message GetByExperimentReply {
    repeated Schedule schedules = 1;
}

message GetByAccessTokenRequest {
    string token_id = 1;
    bool with_payload = 2;
}

message GetByAccessTokenReply {
    Schedule schedule = 1;
}

service SchedulingService {
  rpc Get(GetRequest) returns (GetReply);
  rpc GetMany(GetManyRequest) returns (GetManyReply);
  rpc GetByUser(GetByUserRequest) returns (GetByUserReply);
  rpc GetByOrg(GetByOrgRequest) returns (GetByOrgReply);
  rpc GetByWorkspace(GetByWorkspaceRequest) returns (GetByWorkspaceReply);
  rpc GetByExperiment(GetByExperimentRequest) returns (GetByExperimentReply);
  rpc GetByAccessToken(GetByAccessTokenRequest) returns (GetByAccessTokenReply);
}
